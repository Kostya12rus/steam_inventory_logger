from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from os import urandom
import base64


def get_key(password: str, salt: bytes) -> bytes:
    """
    Генерирует ключ на основе заданного пароля и соли, используя PBKDF2HMAC.

    Args:
        password (str): Пароль, который будет использоваться для генерации ключа.
        salt (bytes): Соль, используемая в процессе генерации ключа.

    Returns:
        bytes: Ключ, производный от заданного пароля и соли, закодированный в base64.

    Note:
        Этот метод использует PBKDF2HMAC для создания ключа. PBKDF2HMAC - это функция деривации ключа на основе пароля,
        которая сочетает в себе PBKDF2 и HMAC для создания зашифрованного ключа. Функция использует SHA256 в качестве
        алгоритма и выполняет 100000 итераций для повышения безопасности процесса генерации ключа.
    """

    # Инициализация PBKDF2HMAC с переданными параметрами
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )

    # Производная от пароля с использованием PBKDF2HMAC и последующая кодировка результата в base64
    return base64.urlsafe_b64encode(kdf.derive(password.encode()))


def encrypt(message: bytes, password: str) -> bytes:
    """
    Шифрует заданное сообщение с использованием переданного пароля.

    Шифрование выполняется с помощью Fernet, который представляет собой схему шифрования,
    основанную на алгоритме шифрования AES с режимом CBC. Этот метод генерирует случайную соль,
    использует соль и пароль для создания ключа шифрования и затем шифрует сообщение.
    Результирующий зашифрованный текст комбинируется с солью и возвращается.

    Args:
        message (str): Сообщение, которое нужно зашифровать.
        password (str): Пароль, используемый для генерации ключа шифрования.

    Returns:
        bytes: Зашифрованное сообщение с добавленной в начало солью.

    Note:
        Этот метод использует схему шифрования Fernet. Необходимо убедиться в безопасном хранении
        пароля, так как без него невозможно будет расшифровать сообщение.
    """

    # Генерация случайной соли
    salt = urandom(16)

    # Получение ключа для шифрования на основе переданного пароля и сгенерированной соли
    key = get_key(password, salt)

    # Инициализация Fernet с полученным ключом
    f = Fernet(key)

    # Шифрование сообщения
    encrypted = f.encrypt(message)

    # Добавление соли к зашифрованному сообщению и возврат результата
    return salt + encrypted


def decrypt(token: bytes, password: str) -> bytes:
    """
    Расшифровывает переданный зашифрованный текст с использованием указанного пароля.

    Этот метод предполагает, что переданный токен (зашифрованный текст) содержит соль в
    первых 16 байтах. Соль и пароль используются для создания ключа шифрования. Затем
    оставшийся зашифрованный текст расшифровывается и возвращается в виде строки.

    Args:
        token (bytes): Зашифрованный текст, содержащий соль в первых 16 байтах.
        password (str): Пароль, используемый для генерации ключа расшифровки.

    Returns:
        bytes: Расшифрованные данные.

    Note:
        Пароль, переданный в этот метод, должен быть тем же, что и пароль, использованный
        для шифрования оригинального сообщения, иначе расшифровка не будет успешной.
    """

    # Извлечение соли и зашифрованного текста из переданного токена
    salt, token = token[:16], token[16:]

    # Получение ключа для расшифровки на основе переданного пароля и извлеченной соли
    key = get_key(password, salt)

    # Инициализация Fernet с полученным ключом
    f = Fernet(key)

    # Расшифровка зашифрованного текста
    return f.decrypt(token)


def store_encrypted_data(data: bytes, password: str) -> bytes:
    """
    Шифрует переданные данные с использованием указанного пароля.

    Данный метод использует функцию `encrypt` для шифрования переданных данных
    на основе заданного пароля.

    Args:
        data (str): Данные, которые необходимо зашифровать.
        password (str): Пароль для шифрования данных.

    Returns:
        bytes: Зашифрованные данные.

    Note:
        Зашифрованные данные можно будет расшифровать только с помощью
        того же пароля.
    """

    # Шифрование переданных данных
    return encrypt(data, password)


def retrieve_encrypted_data(password: str, encrypted: bytes) -> str:
    """
    Расшифровывает переданные зашифрованные данные с использованием указанного пароля.

    Данный метод использует функцию `decrypt` для расшифровки зашифрованных данных
    на основе заданного пароля.

    Args:
        password (str): Пароль, который был использован при шифровании данных.
        encrypted (bytes): Зашифрованные данные.

    Returns:
        str: Расшифрованные данные.

    Note:
        Если будет передан другой пароль, отличный от того, который был использован
        при шифровании, расшифровка будет неуспешной.
    """

    # Расшифровка зашифрованных данных
    return decrypt(encrypted, password)


